#include<cstdio>
using namespace std;

#define MAX 500

struct Algarism
{
    char g[3][2];
};

bool cmp(Algarism a, Algarism b)
{
    for(int i=0; i<3; ++i)
        for(int j=0; j<2; ++j)
            if(a.g[i][j] != b.g[i][j])
                return 0;
    return 1;
}

int main()
{
    int n;
    char line[MAX], op ;
    Algarism a[MAX], alg[MAX];

    a[0].g[0][0] = '.'; a[0].g[0][1] = '*'; a[0].g[1][0] = '*'; a[0].g[1][1] = '*'; a[0].g[2][0] = '.', a[0].g[2][1] = '.';
    a[1].g[0][0] = '*'; a[1].g[0][1] = '.'; a[1].g[1][0] = '.'; a[1].g[1][1] = '.'; a[1].g[2][0] = '.', a[1].g[2][1] = '.';
    a[2].g[0][0] = '*'; a[2].g[0][1] = '.'; a[2].g[1][0] = '*'; a[2].g[1][1] = '.'; a[2].g[2][0] = '.', a[2].g[2][1] = '.';
    a[3].g[0][0] = '*'; a[3].g[0][1] = '*'; a[3].g[1][0] = '.'; a[3].g[1][1] = '.'; a[3].g[2][0] = '.', a[3].g[2][1] = '.';
    a[4].g[0][0] = '*'; a[4].g[0][1] = '*'; a[4].g[1][0] = '.'; a[4].g[1][1] = '*'; a[4].g[2][0] = '.', a[4].g[2][1] = '.';
    a[5].g[0][0] = '*'; a[5].g[0][1] = '.'; a[5].g[1][0] = '.'; a[5].g[1][1] = '*'; a[5].g[2][0] = '.', a[5].g[2][1] = '.';
    a[6].g[0][0] = '*'; a[6].g[0][1] = '*'; a[6].g[1][0] = '*'; a[6].g[1][1] = '.'; a[6].g[2][0] = '.', a[6].g[2][1] = '.';
    a[7].g[0][0] = '*'; a[7].g[0][1] = '*'; a[7].g[1][0] = '*'; a[7].g[1][1] = '*'; a[7].g[2][0] = '.', a[7].g[2][1] = '.';
    a[8].g[0][0] = '*'; a[8].g[0][1] = '.'; a[8].g[1][0] = '*'; a[8].g[1][1] = '*'; a[8].g[2][0] = '.', a[8].g[2][1] = '.';
    a[9].g[0][0] = '.'; a[9].g[0][1] = '*'; a[9].g[1][0] = '*'; a[9].g[1][1] = '.'; a[9].g[2][0] = '.', a[9].g[2][1] = '.';


    /*a[0].g = {{".", "*"}, {"*", "*"}, {".", "."}};
    a[1].g = {{'*', '.'}, {'.', '.'}, {'.', '.'}};
    a[2].g = {{'*', '.'}, {'*', '.'}, {'.', '.'}};
    a[3].g = {{'*', '*'}, {'.', '.'}, {'.', '.'}};
    a[4].g = {{'*', '*'}, {'.', '*'}, {'.', '.'}};
    a[5].g = {{'*', '.'}, {'.', '*'}, {'.', '.'}};
    a[6].g = {{'*', '*'}, {'*', '.'}, {'.', '.'}};
    a[7].g = {{'*', '*'}, {'*', '*'}, {'.', '.'}};
    a[8].g = {{'*', '.'}, {'*', '*'}, {'.', '.'}};
    a[9].g = {{'.', '*'}, {'*', '.'}, {'.', '.'}};
    */

    while(1)
    {
        gets(line);
        sscanf(line, "%d", &n);
        if(!n)
            break;
        gets(line);
        sscanf(line, "%c", &op);
        if(op == 'S')
        {
            gets(line);
            for(int i=0; i<3; ++i)
                for(int j=0; j<n; ++j)
                    for(int k=0; k<2; ++k)
                        alg[j].g[i][k] = a[line[j] - '0'].g[i][k];

            for(int i=0; i<3; ++i)
                for(int j=0; j<n; ++j)
                {
                    for(int k=0; k<2; ++k)
                        putchar(alg[j].g[i][k]);
                    if(j == n-1)
                        putchar('\n');
                    else
                        putchar(' ');
                }
        }
        else
        {
            for(int i=0; i<3; ++i)
            {
                gets(line);
                int count = 0;
                for(int j=0; j<n; ++j)
                {
                    for(int k=0; k<2; ++k)
                        alg[j].g[i][k] = line[count++];
                    ++count;
                }
            }

            for(int i=0; i<n; ++i)
                for(int j=0; j<10; ++j)
                    if(cmp(a[j], alg[i]))
                        printf("%d", j);
            puts("");
        }
    }

    return 0;
}
